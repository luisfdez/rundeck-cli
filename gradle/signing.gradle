def gpgSigningKeyId = project.hasProperty('signingKeyId') ? project.property('signingKeyId') :
        System.getenv('GPG_SIGNING_KEYID')
def gpgSigningKeyPassphrase = project.hasProperty('signingKeyPassphrase') ? project.property('signingKeyPassphrase') :
        System.getenv('GPG_SIGNING_PASSPHRASE')
def gpgSigningKeyRingFile = project.hasProperty('signingKeyRingFile') ? project.property('signingKeyRingFile') :
        System.getenv('GPG_SIGNING_KEYRING_FILE')

if (gpgSigningKeyRingFile && gpgSigningKeyId && gpgSigningKeyPassphrase) {

    //os-package plugin doesn't seem to produce valid deb sign and fails on rpm sig for signing key > 2048 bytes
    // :(
    // https://github.com/craigwblake/redline/issues/62
//        signingKeyId = '5AE97E75'
//        signingKeyPassphrase = 'dummy'
//        signingKeyRingFile = file('/Users/greg/.gnupg/secring.gpg')


    task signRpm(type: Exec, dependsOn: buildRpm) {
        def cmd = [
                "rpm",
                "--define",
                "_gpg_name ${gpgSigningKeyId}",
                "--define",
                [
                        '__gpg_sign_cmd',
                        '%{__gpg}',
                        'gpg',
                        '--force-v3-sigs',
                        '--digest-algo=sha1',
                        '--batch',
                        '--no-verbose',
                        '--no-armor',
                        '--passphrase-fd',
                        '3',
                        '--no-secmem-warning',
                        '-u',
                        gpgSigningKeyId,
                        '-sbo',
                        '%{__signature_filename}',
                        '%{__plaintext_filename}'
                ].join(' '),

                "--addsign"
        ]
        buildRpm.outputs.files.each {
            cmd.add(it.absolutePath)
        }
        def doquote = {
            if (it.contains(' ')) {
                '"' + it.replaceAll(/[\\]/, '\\\\').replaceAll('"', '\\"') + '"'
            } else {
                it
            }
        }
        cmd = cmd.collect(doquote).join(' ')
        println 'command: '+cmd

        //--define "__gpg_sign_cmd %{__gpg} gpg --force-v3-sigs --digest-algo=sha1 --batch --no-verbose --no-armor
        // --passphrase-fd 3 --no-secmem-warning -u \\\"%{_gpg_name}\\\" -sbo %{__signature_filename}
        // %{__plaintext_filename}"

        def expectScript = '''spawn @CMD@
expect {
    -re "Enter pass *phrase: *" { log_user 0; send -- "@KEYPASS@\r"; log_user 1; }
    eof { catch wait rc; exit [lindex $rc 3]; }
    timeout { close; exit; }
}
expect {
eof { catch wait rc; exit [lindex $rc 3]; }
timeout close
}
'''.replaceAll(/@(\w+)@/, { [CMD: cmd, KEYPASS: gpgSigningKeyPassphrase].get(it[1]) })

        def pb = new ProcessBuilder()
        def ps = pb.command('expect', '-').start()
        ps.outputStream.write(expectScript.getBytes())
        ps.outputStream.close()
        def sout = new BufferedReader(new InputStreamReader(ps.inputStream))
        def serr = new BufferedReader(new InputStreamReader(ps.errorStream))
        def st = new Thread({
            String line = sout.readLine()
            while (line != null) {
                System.out.println(line)
                line = sout.readLine()
            }
        }
        )
        def se = new Thread({
            String line = serr.readLine()
            while (line != null) {
                System.err.println(line)
                line = serr.readLine()
            }
        }
        )
        st.start()
        se.start()
        def ec = ps.waitFor()
        st.join()
        se.join()
        if (ec != 0) {
            throw new Exception("Failed to sign rpm: exit-code: $ec")
        }
    }
}